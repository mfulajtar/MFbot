#!/usr/bin/python3

from datetime import datetime
import pyttsx3
import wikipedia
import wolframalpha
import RPi.GPIO as GPIO
import random
import os
import vosk
import pyaudio
import time

# Speech engine initialisation
engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[2].id)
activationWord = 'computer'  # Single word

# VOSK
model_path = '/home/mfbot/Desktop/MFBOT/models'
model = vosk.Model(model_path)

# Set up the Vosk recognizer
recognizer = vosk.KaldiRecognizer(model, 16000)

# Set up audio stream from microphone
audio_format = pyaudio.paInt16
channels = 1
sample_rate = 16000
chunk_size = 4000

audio = pyaudio.PyAudio()

stream = audio.open(format=audio_format,
                    channels=channels,
                    rate=sample_rate,
                    input=True,
                    frames_per_buffer=chunk_size)

# Wolfram Alpha client
appId = 'YYQJ4V-92QKJL3PQV'
wolframClient = wolframalpha.Client(appId)

# Set GPIO numbering mode
GPIO.setmode(GPIO.BOARD)

# Set pin 11 and 13 as an output, and set servo1 as pin 11 and servo2 as pin 13 as PWM
GPIO.setup(11, GPIO.OUT)
servo1 = GPIO.PWM(11, 50)
GPIO.setup(13, GPIO.OUT)
servo2 = GPIO.PWM(13, 50)

# Set up TRIG_PIN as an output and ECHO_PIN as an input
GPIO.setup(29, GPIO.OUT)
GPIO.setup(22, GPIO.IN)

# start PWM running, but with value of 0 (pulse off)
servo1.start(0)
servo2.start(0)
time.sleep(1)


def measure_distance():
    # Send a 10us pulse to TRIG_PIN
    GPIO.output(29, True)
    time.sleep(0.00001)
    GPIO.output(29, False)

    # Wait for the ECHO_PIN to go high
    start_time = time.time()
    while GPIO.input(22) == 0:
        if (time.time() - start_time) > 1:
            return None
    pulse_start = time.time()

    # Wait for the ECHO_PIN to go low
    while GPIO.input(22) == 1:
        pulse_end = time.time()

    # Calculate the pulse duration and convert it to distance (in cm)
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150

    return distance


# function for moving servos
def Move(angleL, angleR):
    duty1 = angleL / 18 + 2
    duty2 = angleR / 18 + 2
    GPIO.output(11, True)
    GPIO.output(13, True)
    servo1.ChangeDutyCycle(duty1)
    servo2.ChangeDutyCycle(duty2)
    time.sleep(1)
    GPIO.output(11, False)
    GPIO.output(13, False)
    servo1.ChangeDutyCycle(0)
    servo2.ChangeDutyCycle(0)


# function for stoping servos
def Stop():
    servo1.ChangeDutyCycle(0)
    servo2.ChangeDutyCycle(0)


def TurnL():
    Move(113, 113)
    Stop()


def TurnR():
    Move(70, 70)
    Stop()


# recursive function for moving forward that controls if there is obstacle in a way
def Forward():
    i = 0
    while (i < 4):
        distance = measure_distance()
        if distance is not None and distance < 25:
            Stop()
            time.sleep(2)
            speak("there is an obstacle in a way, I will go around")
            TurnL()
            time.sleep(2)
            Forward()
            time.sleep(2)
            TurnR()
            time.sleep(2)
            Forward()
            break
        Move(66, 112)
        i = i + 1
    Stop()


def Backward():
    i = 0
    while (i < 3):
        Move(115, 74)
        i = i + 1
    Stop()


# Function that turns text into words
def speak(text, rate=150):
    engine.setProperty('rate', rate)
    engine.say(text)
    engine.runAndWait()
    time.sleep(1)


# function for recognizing speech
def RecognizeSpeech():
    try:
        print('Recognizing speech...')
        speak("listening")
        query = ""
        start_time = time.time()
        while time.time() - start_time < 10:
            data = stream.read(chunk_size, exception_on_overflow=False)
            if len(data) == 0:
                break

            if recognizer.AcceptWaveform(data):
                result = recognizer.Result()
                result_dict = eval(result)
                query = result_dict["text"]  # Clear query before processing each new input
                print(f'The input speech was: {query}')


    except Exception as exception:
        print(exception)
        return 'None'

    return query


# function that reads from wiki page
def search_wikipedia(keyword=''):
    searchResults = wikipedia.search(keyword)
    if not searchResults:
        return 'No result received'
    try:
        wikiPage = wikipedia.page(searchResults[0])
    except wikipedia.DisambiguationError as error:
        wikiPage = wikipedia.page(error.options[0])
    print(wikiPage.title)
    wikiSummary = str(wikiPage.summary)
    sentences = wikiSummary.split('.')
    return '.'.join(sentences[:3]) + '.'


# function to check if variable is list or not
def listOrDict(var):
    if isinstance(var, list):
        return var[0]['plaintext']
    else:
        return var['plaintext']


# function for using Wolframalpha AI
def search_wolframalpha(keyword=''):
    response = wolframClient.query(keyword)

    # @success: Wolfram Alpha was able to resolve the query
    # @numpods: Number of results returned
    # pod: List of results. This can also contain subpods

    # Query not resolved
    if response['@success'] == 'false':
        speak('I could not compute')
    # Query resolved
    else:
        result = ''
        # Question
        pod0 = response['pod'][0]
        # May contain answer (Has highest confidence value)
        # if it's primary or has the title of result or definition, then it's the official result
        pod1 = response['pod'][1]
        if (('result') in pod1['@title'].lower()) or (pod1.get('@primary', 'false') == 'true') or (
                'definition' in pod1['@title'].lower()):
            # Get the result
            result = listOrDict(pod1['subpod'])
            # Remove bracketed section
            return result.split('(')[0]
        else:
            # Get the interpretation from pod0
            question = listOrDict(pod0['subpod'])
            # Remove bracketed section
            question = question.split('(')[0]
            # Could search wiki instead here?
            return question


# function for numbering files
def get_NameOfFile():
    i = 1
    while True:
        filename = f"note{i}.txt"
        if not os.path.exists(filename):
            return filename
        i += 1


# Main loop
def main():
    speak('M F bot booting up', 150)
    while True:
        # Parse as a list
        query = RecognizeSpeech().lower().split()

        random_number = random.randint(1, 3)

        # if there is nothing in query that respond randomly
        if not query:
            if random_number == 1:
                print('I did not quite catch that')
                speak('I did not quite catch that')
            if random_number == 2:
                print('can you repeat that?')
                speak('can you repeat that?')
            if random_number == 3:
                print('Sorry, didnt hear that correctly')
                speak('Sorry, didnt hear that correctly')

        elif query and query[0] == activationWord:
            query.pop(0)

            # say something
            if query[0] == 'say':
                if 'hello' in query:
                    speak('hello MATUS!')
                else:
                    query.pop(0)
                    speech = ' '.join(query)
                    speak(speech)

            # Wiki reading
            if query[0] == 'what':
                if 'is' in query:
                    query = ' '.join(query[1:])
                    speak('loading wikipedia article')
                    speak(search_wikipedia(query))

            # Wolfram Alpha AI
            if query[0] == 'compute' or query[0] == 'computer':
                query = ' '.join(query[1:])
                try:
                    result = search_wolframalpha(query)
                    speak(result)
                except:
                    speak('Unable to compute')

            # notes
            if query[0] == 'log':
                speak('Ready to record your note')
                newNote = RecognizeSpeech().lower()
                nameFile = get_NameOfFile()
                with open(nameFile, 'w') as newFile:
                    newFile.write(str(datetime.today().date()) + ": ")
                    newFile.write(newNote)
                speak('Note written')

            if query[0] == 'go':
                if 'forward' in query:
                    Forward()

            if query[0] == 'go':
                if 'backwards' in query:
                    Backward()

            if query[0] == 'go':
                if 'left' in query:
                    TurnL()

            if query[0] == 'go':
                if 'right' in query:
                    TurnR()

            if query[0] == 'exit':
                speak('Goodbye')
                # Clean things up at the end
                servo1.stop()
                servo2.stop()
                GPIO.cleanup()
                break


        else:
            print('Sorry, didnt recognize that command')
            speak('Sorry, didnt recognize that command')


if _name_ == '_main_':
    main()
